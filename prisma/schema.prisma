// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  EMPLOYEE
  RETAILER
  CUSTOMER
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  SCHEME_PAYMENT
  REFUND
  COMMISSION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  phone       String?
  role        UserRole @default(CUSTOMER)
  password    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // For admin-created users
  
  // Relations
  wallet      Wallet?
  applications Application[]
  transactions Transaction[]
  certificates Certificate[]
  queries     Query[]
  
  // Admin/Employee specific
  createdUsers User[] @relation("UserCreator")
  creator     User?  @relation("UserCreator", fields: [createdBy], references: [id])
  
  @@map("users")
}

model Wallet {
  id          String   @id @default(cuid())
  userId      String   @unique
  balance     Decimal  @default(0) @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  @@map("wallets")
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  walletId    String
  type        TransactionType
  amount      Decimal           @db.Decimal(10, 2)
  status      TransactionStatus @default(PENDING)
  description String?
  reference   String?           // Payment gateway reference
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  user        User   @relation(fields: [userId], references: [id])
  wallet      Wallet @relation(fields: [walletId], references: [id])
  
  @@map("transactions")
}

model Scheme {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  isFree      Boolean  @default(false)
  isActive    Boolean  @default(true)
  category    String?
  documents   String[] // Required documents
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  applications Application[]
  
  @@map("schemes")
}

model Application {
  id          String            @id @default(cuid())
  userId      String
  schemeId    String
  formData    Json              // Store form responses
  documents   String[]          // Uploaded document URLs
  status      ApplicationStatus @default(PENDING)
  amount      Decimal?          @db.Decimal(10, 2)
  approvedBy  String?
  rejectedBy  String?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  user        User   @relation(fields: [userId], references: [id])
  scheme      Scheme @relation(fields: [schemeId], references: [id])
  
  @@map("applications")
}

model Certificate {
  id            String   @id @default(cuid())
  userId        String
  certificateNumber String @unique
  name          String
  issueDate     DateTime @default(now())
  validUntil    DateTime?
  isActive      Boolean  @default(true)
  
  // Relations
  user          User @relation(fields: [userId], references: [id])
  
  @@map("certificates")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("products")
}

model TrainingVideo {
  id          String   @id @default(cuid())
  title       String
  description String?
  youtubeUrl  String
  thumbnail   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("training_videos")
}

model Query {
  id          String   @id @default(cuid())
  userId      String
  subject     String
  message     String
  type        String   // call, whatsapp, email
  status      String   @default("open") // open, in_progress, closed
  response    String?
  respondedBy String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User @relation(fields: [userId], references: [id])
  
  @@map("queries")
}

model Advertisement {
  id          String   @id @default(cuid())
  title       String
  image       String
  link        String?
  position    String   // header, sidebar, footer, dashboard
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("advertisements")
}
